AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GeneralCacheLambda

Globals:
  Function:
    CodeUri: GeneralCache
    Runtime: java8
    MemorySize: 512
    Timeout: 30

Resources:
  EndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-west-2.dynamodb
      RouteTableIds:
        - Ref: MyVPCRouteTable
      VpcId:
        Ref: MyVPC

  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      MaximumRetryAttempts: 3
      Enabled: true
      EventSourceArn:
        Fn::GetAtt: [ CustomerOffer , StreamArn ]
      FunctionName:
        Fn::GetAtt: [ RedriverHandler , Arn ]
      StartingPosition: TRIM_HORIZON

  CustomerOffer:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true

  RedriverHandler:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds:
          - Ref: MySubnet
      Handler: handler.Handler::handleRequest

  GenerateRecordHandler:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds:
          - Ref: MySubnet
      Handler: handler.GenerateRecordHandler::handleRequest
      Environment:
        Variables:
          REGION: "us-west-2"
          TableName:
            Ref: CustomerOffer

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  MyVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC

  MyVPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCRouteTable
      SubnetId:
        Ref: MySubnet

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/16

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: ElastiCache Subnet Group
      SubnetIds:
        - Ref: MySubnet

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elastic cache security group
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId:
            Ref: LambdaSecurityGroup

  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: memcached
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - Fn::GetAtt: [ElastiCacheSecurityGroup, GroupId]
      CacheSubnetGroupName:
        Ref: ElastiCacheSubnetGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda security group
      VpcId:
        Ref: MyVPC
